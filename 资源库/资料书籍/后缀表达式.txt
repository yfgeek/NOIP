后缀表达式目录

后缀表达式
表达式的计算
表达式之间的转换
 编辑本段后缀表达式
　　不包含括号，运算符放在两个运算对象的后面，所有的计算按运算符出现的顺序，严格从左向右进行（不再考虑运算符的优先规则，如：2 1 + 3 *,即(2 + 1) * 3
编辑本段表达式的计算
　　运用后缀表达式进行计算的具体做法： 　　・建立一个栈S ・从左到右读后缀表达式，读到数字就将它转换为数值压入栈S中，读到运算符则从栈中依次弹出两个数分别到Y和X，然后以“X 运算符 Y”的形式计算机出结果，再压加栈S中 ・如果后缀表达式未读完，就重复上面过程，最后输出栈顶的数值则为结束
编辑本段表达式之间的转换
　　计算机实现转换： 　　将中缀表达式转换为后缀表达式的算法思想： 　　・开始扫描； 　　・数字时，加入后缀表达式； 　　・运算符： 　　a. 若为最高级的运算符，入栈； 　　b. 若为 '('，入栈； 　　c. 若为 ')'，则依次把栈中的的运算符加入后缀表达式中，直到出现'('，从栈中删除'(' ； 　　d. 若为不是最高级的运算符，则将从栈顶到第一个优先级不大于（小于，低于或等于）它的运算符（或 '(',但优先满足前一个条件）之间的运算符加入后缀表达式中，该运算符再入栈； 　　>>这句话不好理解，可以说成这样，从栈顶开始，依次弹出比当前处理的运算符优先级高的运算符，直到一个比它优先级低的或者遇到了一个左括号就停止。 　　・当扫描的中缀表达式结束时，栈中的的所有运算符出栈；　 　　人工实现转换 　　这里我给出一个中缀表达式：a+b*c-(d+e) 　　第一步：按照运算符的优先级对所有的运算单位加括号：式子变成了：((a+(b*c))-(d+e)) 　　第二步：转换前缀与后缀表达式 　　前缀：把运算符号移动到对应的括号前面 　　则变成了：-( +(a *(bc)) +(de)) 　　把括号去掉：-+a*bc+de 前缀式子出现 　　后缀：把运算符号移动到对应的括号后面 　　则变成了：((a(bc)* )+ (de)+ )- 　　把括号去掉：abc*+de+- 后缀式子出现 　　发现没有，前缀式，后缀式是不需要用括号来进行优先级的确定的。如表达式：3+(2-5)*6/3 　　后缀表达式 栈 　　3 + 　　3 +( 　　3 2 +(- 　　3 2 5 - + 　　3 2 5 - +* 　　3 2 5 - 6 * +/ 　　3 2 5 - 6 *3 +/ 　　3 2 5 - 6 *3 /+